<?xml version="1.0" encoding="UTF-8"?>
<pmd version="4.2.1" timestamp="Thu Dec 30 23:26:17 SGT 2010">
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/events/CountdownEvent.as">
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.event.EventMissingCloneFunction" ruleset="All Flex Rules" package="events" class="CountdownEvent.as" externalInfoUrl="" priority="3">The clone event must be overiden in a custom event. When creating your own custom Event class, you must override the inherited Event.clone() method in order for it to duplicate the properties of your custom class. If you do not set all the properties that you add in your event subclass, those properties will not have the correct values when the event is cloned. This is important because the Flex SDK clones events whenever redispatching takes place</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/events/GameEvent.as">
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.event.EventMissingCloneFunction" ruleset="All Flex Rules" package="events" class="GameEvent.as" externalInfoUrl="" priority="3">The clone event must be overiden in a custom event. When creating your own custom Event class, you must override the inherited Event.clone() method in order for it to duplicate the properties of your custom class. If you do not set all the properties that you add in your event subclass, those properties will not have the correct values when the event is cloned. This is important because the Flex SDK clones events whenever redispatching takes place</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/events/LevelEvent.as">
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.event.EventMissingCloneFunction" ruleset="All Flex Rules" package="events" class="LevelEvent.as" externalInfoUrl="" priority="3">The clone event must be overiden in a custom event. When creating your own custom Event class, you must override the inherited Event.clone() method in order for it to duplicate the properties of your custom class. If you do not set all the properties that you add in your event subclass, those properties will not have the correct values when the event is cloned. This is important because the Flex SDK clones events whenever redispatching takes place</violation>
      <violation beginline="20" endline="20" begincolumn="30" endcolumn="30" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="All Flex Rules" package="events" class="LevelEvent.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/events/MenuButtonEvent.as">
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.event.EventMissingCloneFunction" ruleset="All Flex Rules" package="events" class="MenuButtonEvent.as" externalInfoUrl="" priority="3">The clone event must be overiden in a custom event. When creating your own custom Event class, you must override the inherited Event.clone() method in order for it to duplicate the properties of your custom class. If you do not set all the properties that you add in your event subclass, those properties will not have the correct values when the event is cloned. This is important because the Flex SDK clones events whenever redispatching takes place</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/events/MenuEvent.as">
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.event.EventMissingCloneFunction" ruleset="All Flex Rules" package="events" class="MenuEvent.as" externalInfoUrl="" priority="3">The clone event must be overiden in a custom event. When creating your own custom Event class, you must override the inherited Event.clone() method in order for it to duplicate the properties of your custom class. If you do not set all the properties that you add in your event subclass, those properties will not have the correct values when the event is cloned. This is important because the Flex SDK clones events whenever redispatching takes place</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/events/TimeEvent.as">
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.event.EventMissingCloneFunction" ruleset="All Flex Rules" package="events" class="TimeEvent.as" externalInfoUrl="" priority="3">The clone event must be overiden in a custom event. When creating your own custom Event class, you must override the inherited Event.clone() method in order for it to duplicate the properties of your custom class. If you do not set all the properties that you add in your event subclass, those properties will not have the correct values when the event is cloned. This is important because the Flex SDK clones events whenever redispatching takes place</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/game/animation/Animation.as">
      <violation beginline="22" endline="22" begincolumn="33" endcolumn="33" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="All Flex Rules" package="game.animation" class="Animation.as" externalInfoUrl="" priority="1">This parameter (removeAtComplete) of this function is not used. </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/game/animation/ExplosionAnimation.as">
      <violation beginline="14" endline="14" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="game.animation" class="ExplosionAnimation.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/game/animation/HeroWinAnimation.as">
      <violation beginline="13" endline="13" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="game.animation" class="HeroWinAnimation.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (smoke1). </violation>
      <violation beginline="14" endline="14" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="game.animation" class="HeroWinAnimation.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (smoke2). </violation>
      <violation beginline="15" endline="15" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="game.animation" class="HeroWinAnimation.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (smoke3). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/game/animation/SmokeAnimation.as">
      <violation beginline="14" endline="14" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="game.animation" class="SmokeAnimation.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/game/GameController.as">
      <violation beginline="20" endline="20" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="All Flex Rules" package="game" class="GameController.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 14 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/game/gui/Background.as">
      <violation beginline="26" endline="26" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.switchrules.SwitchStatementsShouldHaveDefault" ruleset="All Flex Rules" package="game.gui" class="Background.as" externalInfoUrl="" priority="1">A switch statement does not contain a default statement. Switch statements should have a default label in order to detect corner cases</violation>
      <violation beginline="26" endline="26" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.switchrules.TooFewBrancheInSwitchStatement" ruleset="All Flex Rules" package="game.gui" class="Background.as" externalInfoUrl="" priority="3">There are too few branches in this switch statement (3 minimum, but 1 actual). Switch statements are designed for complex branches, and allow branches to share treatment. Using a switch for only 2 branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement</violation>
      <violation beginline="39" endline="39" begincolumn="34" endcolumn="34" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="All Flex Rules" package="game.gui" class="Background.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/game/gui/Countdown.as">
      <violation beginline="21" endline="21" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="game.gui" class="Countdown.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 6 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="23" endline="23" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="game.gui" class="Countdown.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (anim1). </violation>
      <violation beginline="24" endline="24" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="game.gui" class="Countdown.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (anim2). </violation>
      <violation beginline="25" endline="25" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="game.gui" class="Countdown.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (anim3). </violation>
      <violation beginline="26" endline="26" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="game.gui" class="Countdown.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (anim4). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/game/gui/InfoBar.as">
      <violation beginline="-1" endline="-1" begincolumn="-1" endcolumn="-1" rule="adobe.ac.pmd.rules.maintanability.ExcessiveImport" ruleset="All Flex Rules" package="game.gui" class="InfoBar.as" externalInfoUrl="" priority="3">A high number of imports can indicate a high degree of coupling within an object. (15 maximum but 16 actually). A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/game/gui/LevelFinishedMenu.as">
      <violation beginline="76" endline="76" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.EmptyPrivateMethod" ruleset="All Flex Rules" package="game.gui" class="LevelFinishedMenu.as" externalInfoUrl="" priority="1">This private method (submitScoreClicked) is used but its content is empty. </violation>
      <violation beginline="18" endline="18" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyPublic" ruleset="All Flex Rules" package="game.gui" class="LevelFinishedMenu.as" externalInfoUrl="" priority="3">Too many public fields or functions detected (10 maximum, but 12 actually). A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it</violation>
      <violation beginline="18" endline="18" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="game.gui" class="LevelFinishedMenu.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 7 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/elements/Fan1.as">
      <violation beginline="10" endline="10" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.elements" class="Fan1.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (Fan1). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/elements/Fan2.as">
      <violation beginline="10" endline="10" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.elements" class="Fan2.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (Fan2). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/elements/LevelElement.as">
      <violation beginline="42" endline="42" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.switchrules.SwitchStatementsShouldHaveDefault" ruleset="All Flex Rules" package="level.elements" class="LevelElement.as" externalInfoUrl="" priority="1">A switch statement does not contain a default statement. Switch statements should have a default label in order to detect corner cases</violation>
      <violation beginline="13" endline="13" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.elements" class="LevelElement.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (PLATFORM_1). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/elements/Platform1.as">
      <violation beginline="9" endline="9" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.elements" class="Platform1.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (Platform1). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/elements/PlatformLong1.as">
      <violation beginline="11" endline="11" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.elements" class="PlatformLong1.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (PlatformLong1). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/LevelContoller.as">
      <violation beginline="59" endline="59" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.switchrules.SwitchStatementsShouldHaveDefault" ruleset="All Flex Rules" package="level" class="LevelContoller.as" externalInfoUrl="" priority="1">A switch statement does not contain a default statement. Switch statements should have a default label in order to detect corner cases</violation>
      <violation beginline="59" endline="59" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.switchrules.TooFewBrancheInSwitchStatement" ruleset="All Flex Rules" package="level" class="LevelContoller.as" externalInfoUrl="" priority="3">There are too few branches in this switch statement (3 minimum, but 2 actual). Switch statements are designed for complex branches, and allow branches to share treatment. Using a switch for only 2 branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/levels/Level.as">
      <violation beginline="60" endline="60" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.switchrules.SwitchStatementsShouldHaveDefault" ruleset="All Flex Rules" package="level.levels" class="Level.as" externalInfoUrl="" priority="1">A switch statement does not contain a default statement. Switch statements should have a default label in order to detect corner cases</violation>
      <violation beginline="72" endline="72" begincolumn="84" endcolumn="84" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="level.levels" class="Level.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="80" endline="80" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="level.levels" class="Level.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="21" endline="21" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="level.levels" class="Level.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 11 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="60" endline="60" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.switchrules.TooFewBrancheInSwitchStatement" ruleset="All Flex Rules" package="level.levels" class="Level.as" externalInfoUrl="" priority="3">There are too few branches in this switch statement (3 minimum, but 2 actual). Switch statements are designed for complex branches, and allow branches to share treatment. Using a switch for only 2 branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement</violation>
      <violation beginline="72" endline="72" begincolumn="38" endcolumn="38" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="All Flex Rules" package="level.levels" class="Level.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together</violation>
      <violation beginline="102" endline="102" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (le1). </violation>
      <violation beginline="103" endline="103" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (le2). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/levels/Level1.as">
      <violation beginline="24" endline="24" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level1.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (Level1). </violation>
      <violation beginline="24" endline="24" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.style.ConstructorNonEmptyReturnType" ruleset="All Flex Rules" package="level.levels" class="Level1.as" externalInfoUrl="" priority="3">A constructor should not have a return type. Even if this is syntactically correct, there should not be a return type for a constructor</violation>
      <violation beginline="69" endline="69" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level1.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (le1). </violation>
      <violation beginline="70" endline="70" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level1.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (le2). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/levels/Level2.as">
      <violation beginline="15" endline="15" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level2.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (Level2). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/levels/Level3.as">
      <violation beginline="48" endline="48" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="1">This variable (c1) is not used. </violation>
      <violation beginline="49" endline="49" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="1">This variable (c2) is not used. </violation>
      <violation beginline="51" endline="51" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="1">This variable (upperTunnel) is not used. </violation>
      <violation beginline="52" endline="52" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="1">This variable (lowerTunnel) is not used. </violation>
      <violation beginline="54" endline="54" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="1">This variable (entranceLower1) is not used. </violation>
      <violation beginline="55" endline="55" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="1">This variable (entranceUpper1) is not used. </violation>
      <violation beginline="57" endline="57" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="1">This variable (entranceUpper2) is not used. </violation>
      <violation beginline="58" endline="58" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="1">This variable (entranceLower2) is not used. </violation>
      <violation beginline="18" endline="18" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (Level3). </violation>
      <violation beginline="27" endline="27" begincolumn="28" endcolumn="28" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 23 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="32" endline="32" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (pos1). </violation>
      <violation beginline="33" endline="33" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (pos2). </violation>
      <violation beginline="35" endline="35" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (motor1). </violation>
      <violation beginline="36" endline="36" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (cross1_1). </violation>
      <violation beginline="37" endline="37" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (cross1_2). </violation>
      <violation beginline="38" endline="38" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (group1). </violation>
      <violation beginline="41" endline="41" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (motor2). </violation>
      <violation beginline="42" endline="42" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (cross2_1). </violation>
      <violation beginline="43" endline="43" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (cross2_2). </violation>
      <violation beginline="44" endline="44" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (cross2_3). </violation>
      <violation beginline="45" endline="45" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (group2). </violation>
      <violation beginline="48" endline="48" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (c1). </violation>
      <violation beginline="49" endline="49" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (c2). </violation>
      <violation beginline="54" endline="54" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (entranceLower1). </violation>
      <violation beginline="55" endline="55" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (entranceUpper1). </violation>
      <violation beginline="57" endline="57" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (entranceUpper2). </violation>
      <violation beginline="58" endline="58" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level3.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (entranceLower2). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/levels/Level4.as">
      <violation beginline="27" endline="27" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="All Flex Rules" package="level.levels" class="Level4.as" externalInfoUrl="" priority="1">This variable (cp) is not used. </violation>
      <violation beginline="28" endline="28" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="All Flex Rules" package="level.levels" class="Level4.as" externalInfoUrl="" priority="1">This variable (es) is not used. </violation>
      <violation beginline="14" endline="14" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level4.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (Level4). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/level/levels/Level5.as">
      <violation beginline="-1" endline="-1" begincolumn="-1" endcolumn="-1" rule="adobe.ac.pmd.rules.maintanability.ExcessiveImport" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">A high number of imports can indicate a high degree of coupling within an object. (15 maximum but 18 actually). A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold</violation>
      <violation beginline="29" endline="29" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (Level5). </violation>
      <violation beginline="90" endline="90" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (knife1). </violation>
      <violation beginline="90" endline="90" begincolumn="0" endcolumn="213" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Too long line (200 maximum, but 213 actually). </violation>
      <violation beginline="93" endline="93" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (knife2). </violation>
      <violation beginline="93" endline="93" begincolumn="0" endcolumn="213" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Too long line (200 maximum, but 213 actually). </violation>
      <violation beginline="96" endline="96" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (knife3). </violation>
      <violation beginline="96" endline="96" begincolumn="0" endcolumn="212" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Too long line (200 maximum, but 212 actually). </violation>
      <violation beginline="99" endline="99" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (knife4). </violation>
      <violation beginline="102" endline="102" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (spike1). </violation>
      <violation beginline="102" endline="102" begincolumn="0" endcolumn="223" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Too long line (200 maximum, but 223 actually). </violation>
      <violation beginline="103" endline="103" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (spike2). </violation>
      <violation beginline="103" endline="103" begincolumn="0" endcolumn="226" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Too long line (200 maximum, but 226 actually). </violation>
      <violation beginline="104" endline="104" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (spike3). </violation>
      <violation beginline="104" endline="104" begincolumn="0" endcolumn="226" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Too long line (200 maximum, but 226 actually). </violation>
      <violation beginline="105" endline="105" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (spike4). </violation>
      <violation beginline="105" endline="105" begincolumn="0" endcolumn="226" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Too long line (200 maximum, but 226 actually). </violation>
      <violation beginline="106" endline="106" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (spike5). </violation>
      <violation beginline="106" endline="106" begincolumn="0" endcolumn="227" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Too long line (200 maximum, but 227 actually). </violation>
      <violation beginline="111" endline="111" begincolumn="0" endcolumn="216" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Too long line (200 maximum, but 216 actually). </violation>
      <violation beginline="113" endline="113" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (_tl2). </violation>
      <violation beginline="128" endline="128" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (le1). </violation>
      <violation beginline="129" endline="129" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="level.levels" class="Level5.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (le2). </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/Main.as">
      <violation beginline="-1" endline="-1" begincolumn="-1" endcolumn="-1" rule="adobe.ac.pmd.rules.maintanability.ExcessiveImport" ruleset="All Flex Rules" package="" class="Main.as" externalInfoUrl="" priority="3">A high number of imports can indicate a high degree of coupling within an object. (15 maximum but 16 actually). A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold</violation>
      <violation beginline="29" endline="29" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="All Flex Rules" package="" class="Main.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 2 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="29" endline="29" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.style.ConstructorNonEmptyReturnType" ruleset="All Flex Rules" package="" class="Main.as" externalInfoUrl="" priority="3">A constructor should not have a return type. Even if this is syntactically correct, there should not be a return type for a constructor</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/score/ScoreManager.as">
      <violation beginline="18" endline="18" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="score" class="ScoreManager.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="93" endline="93" begincolumn="31" endcolumn="31" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="score" class="ScoreManager.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="95" endline="95" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="score" class="ScoreManager.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="82" endline="82" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="All Flex Rules" package="score" class="ScoreManager.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/states/game/GameState.as">
      <violation beginline="-1" endline="-1" begincolumn="-1" endcolumn="-1" rule="adobe.ac.pmd.rules.maintanability.ExcessiveImport" ruleset="All Flex Rules" package="states.game" class="GameState.as" externalInfoUrl="" priority="3">A high number of imports can indicate a high degree of coupling within an object. (15 maximum but 18 actually). A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold</violation>
      <violation beginline="25" endline="25" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="All Flex Rules" package="states.game" class="GameState.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 12 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="25" endline="25" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="states.game" class="GameState.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 8 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="46" endline="46" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="states.game" class="GameState.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 21 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="117" endline="117" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="All Flex Rules" package="states.game" class="GameState.as" externalInfoUrl="" priority="3">Nested if statements are not a good design. </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/states/levelselect/LevelIcon.as">
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="states.levelselect" class="LevelIcon.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 6 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/states/levelselect/LevelSelectState.as">
      <violation beginline="45" endline="45" begincolumn="40" endcolumn="40" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="All Flex Rules" package="states.levelselect" class="LevelSelectState.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
      <violation beginline="60" endline="60" begincolumn="32" endcolumn="32" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="All Flex Rules" package="states.levelselect" class="LevelSelectState.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
      <violation beginline="98" endline="98" begincolumn="13" endcolumn="13" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="All Flex Rules" package="states.levelselect" class="LevelSelectState.as" externalInfoUrl="" priority="3">Nested if statements are not a good design. </violation>
      <violation beginline="108" endline="108" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="All Flex Rules" package="states.levelselect" class="LevelSelectState.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having 'condition'. </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/states/mainmenu/MainMenuState.as">
      <violation beginline="34" endline="34" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.EmptyPrivateMethod" ruleset="All Flex Rules" package="states.mainmenu" class="MainMenuState.as" externalInfoUrl="" priority="1">This private method (highscoreButtonClick) is used but its content is empty. </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/states/StateManager.as">
      <violation beginline="16" endline="16" begincolumn="22" endcolumn="22" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="states" class="StateManager.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/utils/ArrayUtils.as">
      <violation beginline="10" endline="10" begincolumn="65" endcolumn="65" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="utils" class="ArrayUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="12" endline="12" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="utils" class="ArrayUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="35" endline="35" begincolumn="65" endcolumn="65" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="utils" class="ArrayUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="38" endline="38" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="utils" class="ArrayUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="72" endline="72" begincolumn="46" endcolumn="46" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="utils" class="ArrayUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/utils/GlobalStage.as">
      <violation beginline="10" endline="10" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.AvoidUsingPublicStaticField" ruleset="All Flex Rules" package="utils" class="GlobalStage.as" externalInfoUrl="" priority="3">If this field (reference) was meant to be a constant, make it constant. Otherwise, if it is used as a global variable, you may want to redesign this class. </violation>
   </file>
   <file name="C:/Users/Simon Altschuler/Documents/Flash/Runner/src/utils/HotKeys.as">
      <violation beginline="10" endline="10" begincolumn="22" endcolumn="22" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="utils" class="HotKeys.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
   </file>
</pmd>
